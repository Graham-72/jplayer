<?php
/**
 * @file
 * Provides an HTML5-compatible with Flash-fallback audio player.
 *
 * This module provides functionality for loading the jPlayer library and
 * formatters for File Fields.
 */

/**
 * Implements hook_menu().
 */
function jplayer_menu() {
  $items = array();

  $items['admin/config/media/jplayer'] = array(
    'title' => 'jPlayer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jplayer_settings_form'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Configure the settings for the jPlayer module.',
    'file' => 'includes/jplayer.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function jplayer_theme() {
  return array(
    'jplayer_single' => array(
      'variables' => array(
        'player_id' => NULL,
        'items' => array(),
        'settings' => array(),
      ),
      'template' => 'theme/jplayer',
      'file' => 'includes/jplayer.theme.inc',
    ),
    'jplayer_playlist' => array(
      'variables' => array(
        'player_id' => NULL,
        'items' => array(),
        'settings' => array(),
      ),
      'template' => 'theme/jplayer',
      'file' => 'includes/jplayer.theme.inc',
    ),
    'jplayer_item_list' => array(
      'render element' => 'element',
      'file' => 'includes/jplayer.theme.inc',
      'variables' => array(
        'items' => array(),
        'title' => NULL,
        'type' => 'ul',
        'attributes' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function jplayer_field_formatter_info() {
  return array(
    'jplayer_single' => array(
      'label' => t('jPlayer - Single Player'),
      'field types' => array('file'),
      'description' => t('Display an audio file as an HTML5-compatible with Flash-fallback media player.'),
      'settings' => array(
        'autoplay' => 0,
        'solution' => 'html, flash',
        'preload' => 'metadata',
        'volume' => 80,
        'muted' => FALSE,
        'repeat' => 'none',
        'backgroundColor' => '000000',
      ),
    ),
    'jplayer_playlist' => array(
      'label' => t('jPlayer - Playlist'),
      'field types' => array('file'),
      'description' => t('Display multi-value fields as an HTML5-compatible with Flash-fallback media player.'),
      'settings' => array(
        'autoplay' => 0,
        'solution' => 'html, flash',
        'preload' => 'metadata',
        'volume' => 80,
        'muted' => FALSE,
        'repeat' => 'none',
        'backgroundColor' => '000000',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function jplayer_field_formatter_view($obj_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  
  switch ($display['type']) {
    case 'jplayer_single':
      $output = theme(
        'jplayer_single',
        array(
          'player_id' => 'jplayer-' . $object->nid . '-' . str_replace('_', '-', $instance['field_name']),
          'items' => $items,
          'settings' => $display['settings'],
        )
      );
      
      $element[0] = array(
        '#markup' => $output,
        '#attached' => jplayer_add(),
      );
      break;
    case 'jplayer_playlist':
      $output = theme(
        'jplayer_playlist',
        array(
          'player_id' => 'jplayer-' . $object->nid . '-' . str_replace('_', '-', $instance['field_name']),
          'items' => $items,
          'settings' => $display['settings'],
        )
      );
      
      $element[0] = array(
        '#markup' => $output,
        '#attached' => jplayer_add(),
      );
      break;
  }
  
  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function jplayer_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  
  $form = array();
  
  if($display['type'] == 'jplayer_single' || $display['type'] == 'jplayer_playlist') {
    // jPlayer single
    $form['autoplay'] = array(
      '#title' => t('Autoplay'),
      '#type' => 'select',
      '#options' => array(
        0 => t('No'),
        1 => t('Yes'),
      ),
      '#default_value' => $settings['autoplay'],
    );
    
    $form['solution'] = array(
      '#title' => t('Preferred solution'),
      '#type' => 'select',
      '#options' => array(
        'html, flash' => t('HTML5'),
        'flash, html' => t('Flash'),
      ),
      '#default_value' => $settings['solution'],
    );
    
    $form['preload'] = array(
      '#title' => t('Preload media'),
      '#type' => 'select',
      '#options' => array(
        'metadata' => t('No'),
        'auto' => t('Yes'),
      ),
      '#description' => t("Preloading media before it's requested isn't available in all browsers."),
      '#default_value' => $settings['preload'],
    );
    
    $form['volume'] = array(
      '#title' => t('Initial volume'),
      '#type' => 'textfield',
      '#field_suffix' => '%',
      '#maxlength' => 3,
      '#size' => 3,
      '#default_value' => $settings['volume'],
      '#element_validate' => array('jplayer_volume_check'),
    );
    
    $form['muted'] = array(
      '#title' => t('Initially muted'),
      '#type' => 'select',
      '#options' => array(
        FALSE => t('No'),
        TRUE => t('Yes'),
      ),
      '#default_value' => $settings['muted'],
    );
    
    $form['repeat'] = array(
      '#title' => t('Repeat'),
      '#type' => 'select',
      '#options' => array(
        'all' => t('All'),
        'single' => t('Single'),
        'none' => t('None'),
      ),
      '#default_value' => $settings['repeat'],
    );
    
    $form['backgroundColor'] = array(
      '#title' => t('Background color'),
      '#type' => 'textfield',
      '#field_preffix' => '#',
      '#maxlength' => 6,
      '#size' => 6,
      '#default_value' => $settings['backgroundColor'],
    );
  }
  
  return $form;
}

/**
 * Element validation to check volume is between 0 and 100.
 */
function jplayer_volume_check($element, &$form_state) {
  $value = $element['#value'];
  
  if ($value < 0 || $value > 100) {
    form_set_error($element, t('Volume must be a percentage between 0% and 100%.'));
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function jplayer_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  
  $summary = '';
  
  if ($display['type'] == 'jplayer_single') {
    if (isset($settings['autoplay']) && $settings['autoplay'] == 1) {
      $summary = t('Single jPlayer instance which autoplays.');
    }
    else {
      $summary = t('Single jPlayer instance.');
    }
  }
  else if ($display['type'] == 'jplayer_playlist') {
    if (isset($settings['autoplay']) && $settings['autoplay'] == 1) {
      $summary = t('jPlayer playlist which autoplays');
    }
    else {
      $summary = t('jPlayer playlist');
    }
  }
  
  return $summary;
}

/**
 * Add the jPlayer library to the page.
 * @todo make addition of CSS work for different themes
 */
function jplayer_add() {
  $settings = array(
    'jPlayer' => array(
      'swfPath' => base_path() . variable_get('jplayer_directory', 'sites/all/libraries/jplayer'),
      'showHour' => (boolean)variable_get('jplayer_showHour', FALSE),
      'showMin' => (boolean)variable_get('jplayer_showMin', TRUE),
      'showSec' => (boolean)variable_get('jplayer_showSec', TRUE),
      'padHour' => (boolean)variable_get('jplayer_padHour', FALSE),
      'padMin' => (boolean)variable_get('jplayer_padMin', TRUE),
      'padSec' => (boolean)variable_get('jplayer_padSec', TRUE),
      'sepHour' => variable_get('jplayer_sepHour', ':'),
      'sepMin' => variable_get('jplayer_sepMin', ':'),
      'sepSec' => variable_get('jplayer_sepSec', ''),
    ),
  );
  drupal_add_js($settings, array('type' => 'setting', 'scope' => JS_DEFAULT));
  
  return array(
    'library' => array(
      array('jplayer', 'jplayer_library'),
    ),
    'js' => array(
      drupal_get_path('module', 'jplayer') . '/theme/jplayer.js' => array('scope' => 'footer', 'group' => JS_THEME),
    ),
    'css' => array(
      drupal_get_path('module', 'jplayer') . '/theme/jplayer.css' => array(),
    ),
  );
}

/**
 * Implements hook_library().
 */
function jplayer_library() {
  $path = base_path() . variable_get('jplayer_directory', 'sites/all/libraries/jplayer');
  $libraries = array();
  $libraries['jplayer_library'] = array(
    'title' => 'jPlayer',
    'website' => 'http://www.jplayer.org',
    'version' => '2.0',
    'js' => array(
      $path . '/jquery.jplayer.min.js' => array(),
    ),
    'css' => array(),
  );
  return $libraries;
}

/**
 * Return the version of jPlayer installed.
 *
 * @param $directory
 *   The directory to check for a jPlayer installation.
 */
function jplayer_get_version($directory = NULL) {
  $version = 0;
  
  if (!isset($directory)) {
    $directory = variable_get('jplayer_directory', 'sites/all/libraries/jplayer');
  }
  
  if (file_exists($directory . '/jquery.jplayer.min.js')) {
    $contents = file_get_contents($directory . '/jquery.jplayer.min.js');
  }
  elseif (file_exists($directory . '/jquery.jplayer.js')) {
    $contents = file_get_contents($directory . '/jquery.jplayer.js');
  }
  else {
    $contents = NULL;
  }
  
  $matches = array();
  preg_match('/Version:?[ ]*([\d.]+)/i', $contents, $matches);
  
  if (isset($matches[1])) {
    $version = $matches[1];
  }
  
  $parts = explode('.', $version);
  
  return array('version' => $version, 'major' => $parts[0], 'minor' => $parts[1]);
}